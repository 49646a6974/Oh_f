-- title:  Oh F
-- author: Zachary Goldsmith
-- desc:   for "leaps and bounds" GitHub Game Off 2019
-- script: lua

--might add multiplayer later...
--Didn't have a lot of time to work on this. :/

--resolution 240x136...0-239,0-135
--map resolution 30x17...0-29,0-16
--math.floor(math.random(num)) range is 1-num
--math.random(num) range is num-1 to num

function collision(x1,y1,x2,y2,r1,r2,d_bool)		--maybe put a collision circle at each corner within the bounds of the sprite? this would slow the game down...but it might be something to think about later if possible.
	local touch=false
	local dx=( (x1)-(x2) )	--the "+3" in these two line centers (not perfect center, but close enough) the sprite origin
	local dy=( (y1)-(y2) )
	local d=( (dx*dx)+(dy*dy) )
	if d<( (r1+r2)*(r1+r2) )
		then touch=true
	end
	if d_bool==nil
		then
		return touch
	end
	if d_bool==true and touch==true
		then 
		return d
	end
end

function range_rnd(min,max,fraction)	--only + numbers, returns a fraction
	local num=math.random(max+1)
	while num<min or num>max do
		num=math.random(max+1)
	end
	if fraction==true then return num/100 end
	if fraction==false then return num end
end

function sign_rnd()
	local num=math.random(2)
	if num==1 then return -1 else return 1 end
end

function init()
	level=0
	score={0}
	player_x={115}
	player_y={63}
	player_dx={1}
	player_r={5}
	player_jump_cnt={0}	--will determine the max time a player can rise during a jump
	player_jump_cnt_max={30}
	player_apex_cnt={0}	--will be used to kinda keep the player at the top of a jump for a short duration.
	player_apex_cnt_max={50}
	player_up_dy={-1}	--jump speed
	player_down_dy={0.70}	--aka gravity
	player_on_ground={true}
	player_at_apex={false}
	player_jumping={false}
	player_hovering={false}
	player_slow_fall={false}
	player_slow_fall_cnt={0}
	player_slow_fall_cnt_max={100}
	player_slow_fall_dy={0.2}
	player_on_platform={false}
	player_on_platform_dx={}
	player_on_platform_dy={}
	player_died=false
	player_death_cnt=nil
	spawn_platform_cnt=0
	spawn_platform_cnt_max=300
	spawn_platform_active=true
	
	platform_s={}
	platform_x={}
	platform_y={}
	platform_dx={}
	platform_dy={}
	platform_w={}
	boundary_s={}
	boundary_x={}
	boundary_y={}
	boundary_w={}
	boundary_h={}
	boundary_dx=0.05
	boundary_dy=0.05
	l_b=0
	r_b=0
	u_b=0
	d_b=0
	coin_x={}
	coin_y={}
	coin_r=2
end
init()	----------------------------------------
function move_player()
	for i=1,#player_x do
		--if btn(0) then player_y[i]=8 end	--press up
		if btn(1) then test=math.random(2) end	--prqess down
		if btn(2) and player_x[i]>3 then player_x[i]=player_x[i]-player_dx[i] end	--press left
		if btn(3) and player_x[i]<239-7 then player_x[i]=player_x[i]+player_dx[i] end	--press right
---------	if the player is not jumping then check if player is on a platform
	if player_jumping[i]==false
	and player_at_apex[i]==false
		then
		on_platform()
	end
---------
		if not btn(5)
			then
			player_slow_fall[i]=false
			player_slow_fall_cnt[i]=0
		end
		if btn(5) and player_slow_fall[i]==false and player_slow_fall_cnt[i]<player_slow_fall_cnt_max[i]
			then
			player_slow_fall[i]=true
		end
		if player_slow_fall[i]==true and player_slow_fall_cnt[i]<player_slow_fall_cnt_max[i]
			then
			player_slow_fall_cnt[i]=player_slow_fall_cnt[i]+1
		end
		if player_slow_fall_cnt[i]>=player_slow_fall_cnt_max[i]
			then
			player_slow_fall[i]=false
		end
		if player_on_platform[i]==true
			then
			player_slow_fall_cnt[i]=0
		end

		if not btn(4)--btn(4)	if jump button is not pressed then reset jumping variables
			then
			player_jumping[i]=false --rise while btn held
			player_at_apex[i]=false
			player_jump_cnt[i]=0
			player_apex_cnt[i]=0
		end
		if btnp(4)	--start jump while player is on a platform when button is pressed
		and player_jumping[i]==false 
		and player_at_apex[i]==false
		and player_on_platform[i]==true
			then
			player_jumping[i]=true
			player_on_platform[i]=false
		end
		if btn(4)	--jump button has been pressed and is being held. player rises
		--and player_y[i]>=8*14
		and player_jumping[i]==true --rise while btn held
		and player_at_apex[i]==false
			then
			player_y[i]=player_y[i]+player_up_dy[i]	--go up
			player_jump_cnt[i]=player_jump_cnt[i]+1
		end
		-------
		if player_jumping[i]==true	--apex has beem reached.
		and player_at_apex[i]==false
		and player_jump_cnt[i]>=player_jump_cnt_max[i]
			then
			player_jumping[i]=false
			player_hovering[i]=true
			player_at_apex[i]=true
		end
		if player_jumping[i]==false	--apex has beem reached. player hovers
		and player_at_apex[i]==true
		and player_hovering[i]==true
			then
			player_apex_cnt[i]=player_apex_cnt[i]+1
			on_platform()---to insure player can land on platform while hovering
		end
		-------
		if player_apex_cnt[i]>=player_apex_cnt_max[i]	--player has hovered for the max time.
			then 
			player_jumping[i]=false
			player_at_apex[i]=false
		end
---------
	if player_jumping[i]==false		--player is not jumping
	and player_at_apex[i]==false
		then
		on_platform()	--check if player is on the platform
	end
---------
		if player_on_platform[i]==false	--player is in the post hovering phase and is starting to fall until landing on a platform
		and player_jumping[i]==false 
		and player_at_apex[i]==false
			then
			if player_slow_fall[i]==false
				then
				player_y[i]=player_y[i]+player_down_dy[i]
			elseif player_slow_fall[i]==true
				then
				player_y[i]=player_y[i]+player_slow_fall_dy[i]
			end
		end
		----sets player's passive velocity to match the platform
		if player_on_platform[i]==true
--			and player_on_platform_dx[i]~=nil
			then
			player_jump_cnt[i]=0
			player_apex_cnt[i]=0
			player_x[i]=player_x[i]+player_on_platform_dx[i]	--use if platforms are sticky
			player_y[i]=player_y[i]+player_on_platform_dy[i]
			--player_on_platform[i]=false		--use this line instead if you the player to fall reguardless of the platform
		end
	end
end

function draw_player()
	for i=1,#player_x do
		spr(1,math.floor(player_x[i]),math.floor(player_y[i]))
	end
end

	--player_up_dy={-0.03}	--jump speed
	--player_down_dy={0.025}	--aka gravity
	
function spawn_platform()
	--resolution 240x136...0-239,0-135
	--rect x y w h color
	local spawn_side=math.floor(math.random(4))	--udlr
	if spawn_side==1
		then
		table.insert(platform_s,6)
		table.insert(platform_x,math.random(240)-1)
		table.insert(platform_y,-1)
		table.insert(platform_dx,0) --range_rnd(25,50)) --0.25)
		table.insert(platform_dy,range_rnd(25,50,true))
		table.insert(platform_w,(8+math.floor(math.random(16))))
	end
	if spawn_side==2
		then
		table.insert(platform_s,9)
		table.insert(platform_x,math.random(240)-1)
		table.insert(platform_y,135)
		table.insert(platform_dx,0) --range_rnd(25,50)) --0.25)
		table.insert(platform_dy,(-1)*range_rnd(25,50,true))
		table.insert(platform_w,(8+math.floor(math.random(16))))
	end
	if spawn_side==3
		then
		table.insert(platform_s,11)
		table.insert(platform_x,240)
		table.insert(platform_y,math.random(135)-1)
		table.insert(platform_dx,(-1)*range_rnd(25,50,true)) --range_rnd(25,50)) --0.25)
		table.insert(platform_dy,0)
		table.insert(platform_w,(8+math.floor(math.random(16))))
	end
	if spawn_side==4
		then
		table.insert(platform_s,13)
		table.insert(platform_x,-24)
		table.insert(platform_y,math.random(135)-1)
		table.insert(platform_dx,(1)*range_rnd(25,50,true)) --range_rnd(25,50)) --0.25)
		table.insert(platform_dy,0)
		table.insert(platform_w,(8+math.floor(math.random(16))))
	end
end

function despawn_platform()
	for i=1,#platform_s do		--find the white platform
		if platform_x[i]~=nil
			then
			if platform_x[i]<-64 or platform_x[i]>240+64 or platform_y[i]<-64 or platform_y[i]>136+64
				then
				table.remove(platform_s,i)
				table.remove(platform_x,i)
				table.remove(platform_y,i)
				table.remove(platform_dx,i)
				table.remove(platform_dy,i)
				table.remove(platform_w,i)
			end
		end
	end
end

function spawn_starting_platform()-----------------
		table.insert(platform_s,15)
		table.insert(platform_x,player_x[1]-1)
		table.insert(platform_y,player_y[1]+9)
		table.insert(platform_dx,0) --range_rnd(25,50,true)) --0.25)
		table.insert(platform_dy,0)
		table.insert(platform_w,10)	
end

spawn_starting_platform()	-----------

function despawn_player_platform()
	if spawn_platform_cnt<spawn_platform_cnt_max
		then
		spawn_platform_cnt=spawn_platform_cnt+1
	end
	if spawn_platform_cnt==spawn_platform_cnt_max
		then
		if spawn_platform_cnt==spawn_platform_cnt_max and spawn_platform_active==true
			then
			spawn_platform_active=false
			for i=1,#platform_s do		--find the white platform
				if platform_s[i]==15
					then
					table.remove(platform_s,i)
					table.remove(platform_x,i)
					table.remove(platform_y,i)
					table.remove(platform_dx,i)
					table.remove(platform_dy,i)
					table.remove(platform_w,i)
				end
			end
		end			
	end
end

function move_platform()	
	for i=1,#platform_x do
		platform_x[i]=platform_x[i]+platform_dx[i]
		platform_y[i]=platform_y[i]+platform_dy[i]
	end
end

function draw_platform()
	for i=1,#platform_s do
		rect(math.floor(platform_x[i]),math.floor(platform_y[i]),platform_w[i],2,platform_s[i])
	end
end

function on_platform()
	for i=1,#player_x do
		player_on_platform[i]=false
		for j=1,#platform_x do
			if math.floor(player_y[i]+8)==math.floor(platform_y[j])
			and player_x[i]>=platform_x[j]
			and player_x[i]<=(platform_x[j]+platform_w[j])
			or math.floor(player_y[i]+8)==math.floor(platform_y[j])
			and player_x[i]+7>=platform_x[j]
			and player_x[i]+7<=(platform_x[j]+platform_w[j])
			or math.floor(player_y[i]+9)==math.floor(platform_y[j])
			and player_x[i]>=platform_x[j]
			and player_x[i]<=(platform_x[j]+platform_w[j])
			or math.floor(player_y[i]+9)==math.floor(platform_y[j])
			and player_x[i]+7>=platform_x[j]
			and player_x[i]+7<=(platform_x[j]+platform_w[j])
				then
				player_on_platform[i]=true
				player_on_platform_dx[i]=platform_dx[j]
				player_on_platform_dy[i]=platform_dy[j]
				--player_x[i]=platform_x[j]+2
				player_y[i]=platform_y[j]-8
			end
		end
	end
end

function spawn_coins(num)
	coin_x={}
	coin_y={}
	---------------------------resolution 240x136...0-239,0-135
	for i=1,num do
		table.insert(coin_x,range_rnd(16,239-16,false))
		table.insert(coin_y,range_rnd(16,135-16,false))
	end
end

spawn_coins(8)------------------------------------------------------------

function draw_coins()
	-----------------circb x y radius color
	for i=1,#coin_x do
		circ(coin_x[i],coin_y[i],coin_r,9)
		circb(coin_x[i],coin_y[i],coin_r,15)
	end
end

function despawn_coin(i)
	table.remove(coin_x,i)
	table.remove(coin_y,i)
end

--resolution 240x136...0-239,0-135
function spawn_boundary()
	boundary_s={15}
	boundary_x={0}
	boundary_y={0}
	boundary_xf={239}
	boundary_yf={135}
	l_b=0
	r_b=0
	u_b=0
	d_b=0
end

spawn_boundary()	------------------------------

function update_boundary()
	--check which coins are the closest to the four sides of the screen to set the boundary limits
	if #coin_x~=0
		then
		l_b=coin_x[1]
		r_b=coin_x[1]
		u_b=coin_y[1]
		d_b=coin_y[1]
		for i=1,#coin_x do
			if coin_x[i]<l_b then l_b=coin_x[i] end
			if coin_x[i]>r_b then r_b=coin_x[i] end
			if coin_y[i]<u_b then u_b=coin_y[i] end
			if coin_y[i]>d_b then d_b=coin_y[i] end
		end	
	end
	if #coin_x==0
		then
		l_b=boundary_x[1]
		r_b=boundary_xf[1]
		u_b=boundary_y[1]
		d_b=boundary_yf[1]
	end
	if l_b-24>boundary_x[1] then boundary_x[1]=boundary_x[1]+boundary_dx end
	if r_b+24<boundary_xf[1] then boundary_xf[1]=boundary_xf[1]-boundary_dx end
	if u_b-24>boundary_y[1] then boundary_y[1]=boundary_y[1]+boundary_dy end
	if d_b+24<boundary_yf[1] then boundary_yf[1]=boundary_yf[1]-boundary_dy end
end

function draw_boundary()
	--rectb(boundary_x[1],boundary_y[1],boundary_w[1],boundary_h[1],boundary_s[1])
	--line x0 y0 x1 y1 color
	--left
	line(boundary_x[1],boundary_y[1],boundary_x[1],boundary_yf[1],boundary_s[1])
	--right
	line(boundary_xf[1],boundary_y[1],boundary_xf[1],boundary_yf[1],boundary_s[1])
	--up
	line(boundary_x[1],boundary_y[1],boundary_xf[1],boundary_y[1],boundary_s[1])
	--down
	line(boundary_x[1],boundary_yf[1],boundary_xf[1],boundary_yf[1],boundary_s[1])
end

function player_touch_coin()
	for i=1,#player_x do
		for j=1,#coin_x do
			if coin_x[j]~=nil
				then
				if collision(player_x[i]+3,player_y[i]+3,coin_x[j],coin_y[j],player_r[i],coin_r)==true
					then
					despawn_coin(j)
					score[i]=score[i]+1
				end
			end
		end
	end
end

function player_out_of_bounds()
	for i=1,#player_x do
		if player_x[i]+8<boundary_x[1]
		or player_x[i]>boundary_xf[1]
		or player_y[i]+8<boundary_y[1]
		or player_y[i]>boundary_yf[1]
			then
			if player_death_cnt==nil and player_died==false
				then
				player_death_cnt=50
				player_died=true
			end
			return true
			else 
			return false
		end
	end
end

function player_death_animation()
	for i=1,#player_x do
		if player_death_cnt~=0
			then
			player_death_cnt=player_death_cnt-1
			circb(player_x[i]+3,player_y[i]+3,math.random()*9,range_rnd(1,15,false))
			return true
			else return false
		end
	end
end

function necromancy()
	if player_died==true and player_death_cnt==0
		then
		if score[1]>0 then score[1]=score[1]-8 end
		if score[1]<0 then score[1]=0 end
		reset_level()
	end
end

function next_level()
	if #coin_x==0
		then
		reset_level()
		--level=level+1
	end
end

function reset_level()
	player_x={115}
	player_y={63}
	player_dx={1}
	player_r={5}
	player_jump_cnt={0}	--will determine the max time a player can rise during a jump
	player_jump_cnt_max={30}
	player_apex_cnt={0}	--will be used to kinda keep the player at the top of a jump for a short duration.
	player_apex_cnt_max={50}
	player_up_dy={-1}	--jump speed
	player_down_dy={0.70}	--aka gravity
	player_on_ground={true}
	player_at_apex={false}
	player_jumping={false}
	player_hovering={false}
	player_slow_fall={false}
	player_slow_fall_cnt={0}
	player_slow_fall_cnt_max={100}
	player_slow_fall_dy={0.2}
	player_on_platform={false}
	player_on_platform_dx={}
	player_on_platform_dy={}
	player_died=false
	player_death_cnt=nil
	spawn_platform_cnt=0
	spawn_platform_cnt_max=300
	spawn_platform_active=true
	platform_s={}
	platform_x={}
	platform_y={}
	platform_dx={}
	platform_dy={}
	platform_w={}
	boundary_s={}
	boundary_x={}
	boundary_y={}
	boundary_w={}
	boundary_h={}
	boundary_dx=0.05
	boundary_dy=0.05
	l_b=0
	r_b=0
	u_b=0
	d_b=0
	coin_x={}
	coin_y={}
	coin_r=2
	spawn_starting_platform()	spawn_coins(8)	spawn_boundary()
	
end

function TIC()  
	cls()
	necromancy()
	if player_out_of_bounds()==false
		then
		draw_player()
	end
		--pix(player_x[1],player_y[1]+8,4)
		--pix(player_x[1]+7,player_y[1]+8,4)
		draw_platform()
		draw_boundary()
		draw_coins()

	if player_out_of_bounds()==true
		then
		player_death_animation()	
	end
	--circb(player_x[1]+3,player_y[1]+3,player_r[1],6)	--use to see the hit"box" for coins
		---------------------
	print("score: "..tostring(score[1]),0,0,6)
	if math.random(10)==1
		then
	spawn_platform()
	end
	despawn_player_platform()
	if player_out_of_bounds()==false
		then
		move_player()
	end
	player_touch_coin()
	move_platform()
	despawn_platform()
	update_boundary()
	--move_player_on_platform()	--not needed. covered in move_player()
	next_level()
end
